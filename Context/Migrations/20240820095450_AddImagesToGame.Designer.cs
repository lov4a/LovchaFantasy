// <auto-generated />
using System;
using LovchaFantasy.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LovchaFantasy.Context.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240820095450_AddImagesToGame")]
    partial class AddImagesToGame
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.Actionn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("actions");
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.Game", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateOnly>("end")
                        .HasColumnType("date");

                    b.Property<int>("imageId")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("start")
                        .HasColumnType("date");

                    b.HasKey("id");

                    b.HasIndex("imageId");

                    b.ToTable("games");
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("images");
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<bool>("Main")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("leagues");
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.Points", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("ActionnId")
                        .HasColumnType("integer");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<int>("Point")
                        .HasColumnType("integer");

                    b.HasKey("GameId", "ActionnId", "PositionId");

                    b.HasIndex("ActionnId");

                    b.HasIndex("PositionId");

                    b.ToTable("points");
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("positions");
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.Rules", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("BenchCount")
                        .HasColumnType("integer");

                    b.Property<int>("GwTransfers")
                        .HasColumnType("integer");

                    b.Property<int>("MaxTransfers")
                        .HasColumnType("integer");

                    b.Property<int>("OneClubPlayersCount")
                        .HasColumnType("integer");

                    b.Property<int>("TeamCount")
                        .HasColumnType("integer");

                    b.HasKey("GameId");

                    b.ToTable("rules");
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.UserLeagues", b =>
                {
                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("LeagueId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("userLeagues");
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.Game", b =>
                {
                    b.HasOne("LovchaFantasy.Models.Fantasy.Image", "Image")
                        .WithMany()
                        .HasForeignKey("imageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.League", b =>
                {
                    b.HasOne("LovchaFantasy.Models.Fantasy.Game", "Game")
                        .WithMany("Leagues")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.Points", b =>
                {
                    b.HasOne("LovchaFantasy.Models.Fantasy.Actionn", "Actionn")
                        .WithMany("Points")
                        .HasForeignKey("ActionnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LovchaFantasy.Models.Fantasy.Game", "Game")
                        .WithMany("Points")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LovchaFantasy.Models.Fantasy.Position", "Position")
                        .WithMany("Points")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actionn");

                    b.Navigation("Game");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.Rules", b =>
                {
                    b.HasOne("LovchaFantasy.Models.Fantasy.Game", "Game")
                        .WithOne("Rules")
                        .HasForeignKey("LovchaFantasy.Models.Fantasy.Rules", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.UserLeagues", b =>
                {
                    b.HasOne("LovchaFantasy.Models.Fantasy.League", "League")
                        .WithMany("UserLeagues")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LovchaFantasy.Models.Fantasy.ApplicationUser", "User")
                        .WithMany("UserLeagues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.Actionn", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.ApplicationUser", b =>
                {
                    b.Navigation("UserLeagues");
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.Game", b =>
                {
                    b.Navigation("Leagues");

                    b.Navigation("Points");

                    b.Navigation("Rules")
                        .IsRequired();
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.League", b =>
                {
                    b.Navigation("UserLeagues");
                });

            modelBuilder.Entity("LovchaFantasy.Models.Fantasy.Position", b =>
                {
                    b.Navigation("Points");
                });
#pragma warning restore 612, 618
        }
    }
}
