@page "/counter"
@inject ApplicationDbContext context
@using LovchaFantasy.Models.Fantasy
@using LovchaFantasy.Models.Components
@using LovchaFantasy.Context
@using Microsoft.EntityFrameworkCore
@using LovchaFantasy.Components


<PageTitle>Игры</PageTitle>
<div class="admin_panel">
    <AuthorizeView Roles="Admin">
        <Authorized>
            <button @onclick="ShowModal">Добавить игру</button>
        </Authorized>
    </AuthorizeView>
</div>
<ModalWindow Title="Добавление игры" IsVisible="isModalVisible" OnClose="OnModalClose">
    <ChildContent>
        <form id="" method="post" @onsubmit="HandleSubmit">
            <div class="addSmth">
                <div>
                    <h3>Основная информация</h3>
                    <input @bind="@gameForm.Name" type="text" class="form-control" autocomplete="" aria-required="true" required/>
                    <label class="form-label">Название игры</label>
                    <input @bind="@gameForm.Start" type="date" class="form-control" autocomplete="" aria-required="true" required />
                    <label class="form-label">Введите дату начала игры</label>
                    <input @bind="@gameForm.End" type="date" class="form-control" autocomplete="" aria-required="true" required />
                    <label class="form-label">Введите дату завершения игры</label>
                    <InputFile OnChange="HandleImageUpload" />
                    <label class="form-label">Загрузить изображение игры</label>
                    @if (!string.IsNullOrEmpty(ImageForm.Path))
                    {
                        <img src="@ImageForm.Path" alt="Preview Image" style="max-width: 100px; max-height: 100px;" />
                    }
                </div>
                <div>
                    <h3>Правила игры</h3>
                    <input @bind="@gameForm.TeamCount" type="number" class="form-control" autocomplete="" aria-required="true" />
                    <label class="form-label">Количество игроков в команде</label>
                    <input @bind="@gameForm.OneClubPlayers" type="number" class="form-control" autocomplete="" aria-required="true" />
                    <label class="form-label">Максимальное количество игроков из одного клуба</label>
                    <input @bind="@gameForm.GwTransfers" type="number" class="form-control" autocomplete="" aria-required="true" />
                    <label class="form-label">Количество трансферов в каждом туре</label>
                    <input @bind="@gameForm.MaxTransfrs" type="number" class="form-control" autocomplete="" aria-required="true" />
                    <label class="form-label">Максимальное накопленное количество трансферов</label>
                    <input @bind="@gameForm.Bench" type="number" class="form-control" autocomplete="" aria-required="true" />
                    <label class="form-label">Количество человек на скамейке запасных</label>
                    <input @bind="@gameForm.MaxUserTeams" type="number" class="form-control" autocomplete="" aria-required="true" />
                    <label class="form-label">Максимальное количество команд пользователя</label>
                    <input @bind="@gameForm.StartBalance" type="number" class="form-control" autocomplete="" aria-required="true" />
                    <label class="form-label">Стартовый баланс</label>
                    <input @bind="@gameForm.GkCount" type="number" class="form-control" autocomplete="" aria-required="true" />
                    <label class="form-label">Количество Вратраей в команде</label>
                    <input @bind="@gameForm.DefCount" type="number" class="form-control" autocomplete="" aria-required="true" />
                    <label class="form-label">Количество Защитников в команде</label>
                    <input @bind="@gameForm.MidCount" type="number" class="form-control" autocomplete="" aria-required="true" />
                    <label class="form-label">Количество Полузащитников в команде</label>
                    <input @bind="@gameForm.FwdCount" type="number" class="form-control" autocomplete="" aria-required="true" />
                    <label class="form-label">Количество Нападающих в команде</label>
                    <input @bind="@gameForm.StartUpGkCount" type="number" class="form-control" autocomplete="" aria-required="true" />
                    <label class="form-label">Количество Вратраей в стартовом составе</label>
                    <input @bind="@gameForm.StartUpDefCount" type="number" class="form-control" autocomplete="" aria-required="true" />
                    <label class="form-label">Количество Защитников в стартовом составе</label>
                    <input @bind="@gameForm.StartUpMidCount" type="number" class="form-control" autocomplete="" aria-required="true" />
                    <label class="form-label">Количество Полузащитников в стартовом составе</label>
                    <input @bind="@gameForm.StartUpFwdCount" type="number" class="form-control" autocomplete="" aria-required="true" />
                    <label class="form-label">Количество Нападающих в стартовом составе</label>
                </div>
                <div>
                    <h3 style="margin-bottom:0;">Количество очков за действие</h3>
                    @if (Actions == null)
                    {
                        <p>Загрузка...</p>
                    }
                    else
                    {
                        foreach (var action in Actions)
                        {

                            <div class="checkboxPlusInput">
                                <input id="checkbox_@action.Id" type="checkbox" onclick="enableInput();" @onchange="e => HandleActionScoreChange(action.Id, e)" />
                                <div class="positions" id="div_@action.Id" style="display:none">
                                    @if (Positions == null)
                                    {
                                        <p>Загрузка...</p>
                                    }
                                    else
                                    {
                                        foreach (var position in Positions)
                                        {
                                            if (gameForm.ActionScores.FirstOrDefault(x => x.ActionId == action.Id && x.PositionId == position.Id) != null)
                                            {
                                                <div>
                                                    <label>@position.ShortName</label>
                                                    <input id="input_@action.Id" @bind="@gameForm.ActionScores.First(x => x.ActionId == action.Id && x.PositionId == position.Id).Score" type="number" class="form-control" autocomplete="" aria-required="true" />
                                                </div>
                                            }
                                        }
                                    }
                                </div>
                            </div>
                            <label asp-for="" class="form-label">@action.Name</label>
                        }
                    }

                </div>
            </div>
            <button type="submit" class="btn btn-primary">Создать</button>
        </form>
    </ChildContent>
    <FooterContent>
        <button class="btn btn-primary" @onclick="CloseModal">Закрыть</button>
    </FooterContent>
</ModalWindow>

<div class="game-lobby">
    <header>
        <a @onclick="() => ChoseGame(1)" style="background-color:@buttonColors[0]">Текущие игры</a>
        <a @onclick="() => ChoseGame(3)" style="background-color:@buttonColors[1]">Предстоящие игры</a>
        <a @onclick="() => ChoseGame(2)" style="background-color:@buttonColors[2]">Прошедшие игры</a>
    </header>
    <table class="game-lobby_list">
        <tbody>
            @if (Games == null)
            {
                <p>Загрузка...</p>
            }
            else if (!Games.Any())
            {
                <p>Игр не найдено.</p>
            }
            else
            {
                @foreach (var game in Games)
                {
                    <tr>
                        <td width="10%"><img src="@game.Image.FilePath" alt="@game.Image.FileName" /> </td>
                        <td width="30%">@game.name</td>
                        <td width="20%" style="text-align:start">@game.start - @game.end</td>
                        <td width="20%" style="text-align:start"><a style="cursor:pointer" @onclick="() => ShowSecondModal(game.id)">Подробности</a></td>
                        <td width="auto" style="text-align:center;"><div><button href="/entry/@game.id" style="padding-left:5%;padding-right:5%"><a href="/entry/@game.id">Играть</a></button><p style="margin:0">(команд 165)</p></div></td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
<ModalWindow Title="" IsVisible="isSecondModalVisible" OnClose="OnSecondModalClose">
    <HeaderContent>
        <h1 @onclick="ShowMainInfo">Основная информация</h1>
        <h1 @onclick="ShowRules">Правила</h1>
        <h1 @onclick="ShowPoints">Начисление очков</h1>
    </HeaderContent>
    <ChildContent>
        @if (showMainInfo)
        {
            <table class="details_info">
                <tbody>
                    <tr>
                        <td width="40%">Название</td>
                        <td width="60%" style="text-align:start">@selectedGame?.name</td>
                    </tr>
                    <tr>
                        <td width="40%">Дата начала</td>
                        <td width="60%" style="text-align:start">@selectedGame?.start</td>
                    </tr>
                    <tr>
                        <td width="40%">Дата завершения</td>
                        <td width="60%" style="text-align:start">@selectedGame?.end</td>
                    </tr>
                </tbody>
            </table>
        }
        else if (showRules)
        {
            <table class="details_info">
                <tbody>
                    <tr>
                        <td width="40%">Количество человек в команде</td>
                        <td width="60%" style="text-align:start">@gameRules?.TeamCount</td>
                    </tr>
                    <tr>
                        <td width="40%">Максимальное количество игроков из одного клуба</td>
                        <td width="60%" style="text-align:start">@gameRules?.OneClubPlayersCount</td>
                    </tr>
                    <tr>
                        <td width="40%">Количество трансферов в каждом туре</td>
                        <td width="60%" style="text-align:start">@gameRules?.GwTransfers</td>
                    </tr>
                    <tr>
                        <td width="40%">Максимальное количество накопленных трансферов</td>
                        <td width="60%" style="text-align:start">@gameRules?.MaxTransfers</td>
                    </tr>
                    <tr>
                        <td width="40%">Количество игроков на скамейке запасных</td>
                        <td width="60%" style="text-align:start">@gameRules?.BenchCount</td>
                    </tr>
                    <tr>
                        <td width="40%">Стоимость трансфера</td>
                        <td width="60%" style="text-align:start">4 очка</td>
                    </tr>
                    <tr>
                        <td width="40%">Максимальное количество команд пользователя</td>
                        <td width="60%" style="text-align:start">@gameRules?.MaxUserTeams</td>
                    </tr>
                    <tr>
                        <td width="40%">Стартовый баланс</td>
                        <td width="60%" style="text-align:start">@gameRules?.StartBalance</td>
                    </tr>
                </tbody>
            </table>
        }
        else if (showPoints)
        {
            <table class="details_point-info">
                <thead>
                    <tr>
                        <th>Действие</th>
                        <th>Вратарь</th>
                        <th>Защитник</th>
                        <th>Полузащитник</th>
                        <th>Нападающий</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var action in gameActions)
                    {
                        <tr>
                            <td>@Actions.First(i => i.Id == action).Name</td>
                            <td>@gamePoints.First(i => i.ActionnId == action && i.PositionId == 1).Point</td>
                            <td>@gamePoints.First(i => i.ActionnId == action && i.PositionId == 2).Point</td>
                            <td>@gamePoints.First(i => i.ActionnId == action && i.PositionId == 3).Point</td>
                            <td>@gamePoints.First(i => i.ActionnId == action && i.PositionId == 4).Point</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </ChildContent>
    <FooterContent>
        <button class="btn btn-primary" @onclick="CloseSecondModal">Закрыть</button>
    </FooterContent>
</ModalWindow>

<script>
    function enableInput() {
        var checkbox = event.target;
        console.log(checkbox.id);
        var div = document.getElementById('div_' + checkbox.id.split('_')[1]);

        if (checkbox.checked) {
            div.style.display = "flex";
        } else {
            div.style.display = "none";
        }
    }
</script>


@code {
    private List<Game> Games { get; set; } = null!;
    private List<Actionn> Actions { get; set; } = null!;
    private List<Position> Positions { get; set; } = null!;
    private AddGameForm gameForm = new AddGameForm();
    private string errorMessage = string.Empty;
    private Game? selectedGame = new Game();
    private Rules? gameRules = new Rules();
    private List<Points> gamePoints { get; set; } = null!;
    private List<int> gameActions { get; set; } = null!;

    private bool showMainInfo = true;
    private bool showRules = false;
    private bool showPoints = false;

    private string[] buttonColors = { "lightgray", "white", "white" };

    private AddImageForm ImageForm = new AddImageForm();
    private async Task HandleSubmit()
    {
        try
        {
            var image = new Image(ImageForm.Name, ImageForm.Type, ImageForm.Path);
            Console.WriteLine(image.Id + image.FileName + image.ContentType + image.FilePath);
            context.images.Add(image);
            await context.SaveChangesAsync();
            var game = new Game
            {
                    name = gameForm.Name,
                    start = gameForm.Start,
                    end = gameForm.End,
                    imageId = image.Id
            };
            context.games.Add(game);
            await context.SaveChangesAsync();

            var rules = new Rules(game.id,gameForm.TeamCount,gameForm.OneClubPlayers,gameForm.GwTransfers,gameForm.MaxTransfrs,gameForm.Bench,
                gameForm.MaxUserTeams,gameForm.StartBalance, gameForm.GkCount, gameForm.DefCount, gameForm.MidCount, gameForm.FwdCount,
                gameForm.StartUpGkCount, gameForm.StartUpDefCount, gameForm.StartUpMidCount, gameForm.StartUpFwdCount);
            context.rules.Add(rules);
            await context.SaveChangesAsync();

            foreach (var actionScore in gameForm.ActionScores)
            {
                Points points = new Points(game.id,actionScore.ActionId,actionScore.PositionId,actionScore.Score);
                context.Add(points);
            }
            await context.SaveChangesAsync();
            isModalVisible = false;
            gameForm = new AddGameForm();
            ImageForm = new AddImageForm();
            await ChoseGame(1);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = "Произошла ошибка: " + ex.Message;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        Games = await context.games.Include(i=>i.Image).AsNoTracking().ToListAsync();
        Actions = await context.actions.AsNoTracking().ToListAsync();
        Positions = await context.positions.AsNoTracking().ToListAsync();
        showMainInfo = true;
        showRules = false;
        showPoints = false;
        await ChoseGame(1);
        StateHasChanged();
    }

    private void ShowMainInfo()
    {
        showMainInfo = true;
        showRules = false;
        showPoints = false;
        StateHasChanged();
    }
    private void ShowRules()
    {
        showMainInfo = false;
        showRules = true;
        showPoints = false;
        StateHasChanged();
    }
    private void ShowPoints()
    {
        showMainInfo = false;
        showRules = false;
        showPoints = true;
        StateHasChanged();
    }
    private bool isModalVisible = false;

    private void ShowModal()
    {
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    private void OnModalClose(bool visible)
    {
        isModalVisible = visible;
    }

    //Модальное окно подробностей игры
    private bool isSecondModalVisible = false;

    private void ShowSecondModal(int id)
    {
        isSecondModalVisible = true;
        selectedGame = context.games.Find(id);
        gameRules = context.rules.Find(id);
        gamePoints = context.points.Where(i => i.GameId == id).OrderBy(i => i.ActionnId).AsNoTracking().ToList();
        gameActions = gamePoints.Select(i => i.ActionnId).Distinct().ToList();

    }

    private void CloseSecondModal()
    {
        isSecondModalVisible = false;
    }

    private void OnSecondModalClose(bool visible)
    {
        isSecondModalVisible = visible;
    }
    private void HandleActionScoreChange(int actionId, ChangeEventArgs e)
    {
        foreach (var position in Positions)
        {
            var score = int.TryParse(e.Value?.ToString(), out var result) ? result : 0;
            var actionScore = gameForm.ActionScores.FirstOrDefault(x => x.ActionId == actionId && x.PositionId == position.Id);

            if (actionScore == null)
            {
                actionScore = new ActionScore { ActionId = actionId, PositionId = position.Id, Score = score };
                gameForm.ActionScores.Add(actionScore);
            }
            else
            {
                actionScore.Score = score;
            }

        }

    }

    private async Task ChoseGame(int time)
    {
        DateOnly now = DateOnly.FromDateTime(DateTime.Now);
        if (time == 1)
        {
            Games = await context.games.Where(i=>i.start < now && i.end > now).Include(i=>i.Image).AsNoTracking().ToListAsync();
            buttonColors[0] = "lightgray";
            buttonColors[1] = "white";
            buttonColors[2] = "white";
        }
        else if (time == 2)
        {
            Games = await context.games.Where(i => i.end < now).Include(i => i.Image).AsNoTracking().ToListAsync();
            buttonColors[0] = "white";
            buttonColors[1] = "white";
            buttonColors[2] = "lightgray";
        }
        else
        {
            Games = await context.games.Where(i => i.start > now).Include(i => i.Image).AsNoTracking().ToListAsync();
            buttonColors[0] = "white";
            buttonColors[1] = "lightgray";
            buttonColors[2] = "white";
        }
        StateHasChanged();
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var imageFile = e.File;
            if (imageFile != null)
            {
                var fileName = Path.GetFileName(imageFile.Name);
                var filePath = Path.Combine("wwwroot", "Images", "Games", fileName);
                var directoryPath = Path.GetDirectoryName(filePath);
                if (directoryPath != null && !Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }
                using (var stream = imageFile.OpenReadStream())
                {
                    using (var fileStream = new FileStream(filePath, FileMode.Create))
                    {
                        await stream.CopyToAsync(fileStream);
                    }
                }

                ImageForm.Name = fileName;
                ImageForm.Type = imageFile.ContentType;
                ImageForm.Path = $"/Images/Games/{fileName}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при загрузке изображения: {ex.Message}";
            Console.WriteLine($"Ошибка при загрузке изображения: {ex}");
        }
    }


}
