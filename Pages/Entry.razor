@page "/entry/{gameId:int}"
@inject ApplicationDbContext context
@using LovchaFantasy.Models.Fantasy
@using LovchaFantasy.Models.Components
@using LovchaFantasy.Context
@using Microsoft.EntityFrameworkCore
@using LovchaFantasy.Components

<div class="game-head">
    <table>
        <thead>
            <tr>
                <th width="10%">
                    @if (game?.Image != null)
                    {
                        <img src="@game.Image.FilePath" alt="@game.Image.FileName" />
                    }
                </th>
                <th width="30%">@game?.name<td /><a style="cursor:pointer" @onclick="ShowModal">Подробности</a></th>
                <th width="20%" style="text-align:start">@game?.start - @game?.end</th>
                <th width="20%" style="text-align:start"></th>
            </tr>
        </thead>
    </table>
</div>



<div class="team-creating">
    <div class="team-creating_select-players-menu_filters">
        <select style="width:49%" value="@SelectedClubId" @onchange="FilterByClub">
            <option value="0">Все команды</option>
            @if (Clubs != null)
            {
                @foreach (var club in Clubs)
                {
                    <option value="@club.ClubId">@club.Club.Name</option>
                }
            }
        </select>
        <select style="width:49%" value="@SelectedPrice" @onchange="FilterByPrice">
            <option value="15">Максимальная цена</option>
            @if (Clubs != null)
            {
                @for (double i = minPrice; i <= maxPrice; i = i + 0.5)
                {
                    <option value="@i">@i</option>
                }
            }
        </select>
        @if (Positions != null)
        {
            <div class="team-creating_select-players-menu_positions-bar">
                <button @onclick="() => FilterByPosition(0)" class="@(selectedButton == 0 ? "active" : "")">ВСЕ</button>
                @foreach (var position in Positions)
                {
                    <button @onclick="() => FilterByPosition(position.Id)" class="@(selectedButton == position.Id ? "active" : "")">@position.ShortName</button>
                }
            </div>
        }
        <div class="team-creating_select-players-menu_input-plus-clean">
            <input @oninput="FilterByName" value="@SelectedName" type="text" style="width:90%" />
            <button @onclick="CleanFilter" class="btn-close" style="" title="Сбросить фильтр"></button>
        </div>
    </div>

    <div class="team-creating_squad-info">
        <h1>Ваша команда</h1>
        <div class="team-creating_squad-info_allbars">
            <div class="team-creating_squad-info_bar" style="background-color:@(@Squad.TeamCost <= gameRules?.StartBalance ? "green" : "red")">
                <p>@Squad.TeamCost / @gameRules?.StartBalance M</p>
            </div>
            <div class="team-creating_squad-info_bar" style="background-color:@(Squad.TeamPlayers.Where(tp => tp.Id != 0).Count() == gameRules?.TeamCount ? "green" : "red")">
                <p>@Squad.TeamPlayers.Where(tp => tp.Id != 0).Count() / @gameRules?.TeamCount Игроков</p>
            </div>
            <div>
                <button @onclick="CleanSquad" class="btn-close" style="background-color:white; border-radius:10px;margin-left:3%;" title="Очистить состав" alt="Очистить состав"></button>
            </div>
            @if (Squad.TeamPlayers.Where(tp => tp.Id != 0).Count() == gameRules?.TeamCount)
            {
                <div style="text-align:start">
                    <button @onclick="ShowAcceptModal" class="team-creating_squad-info_bar" style="background-color:yellow; margin-left:14%; color:black; font-weight:bold" title="Очистить состав" alt="ПОГНАЛИ!">Зарегистрировать комнаду</button>
                </div>
            }
        </div>
    </div>

    <div class="team-creating_select-players-menu">
        <div>
            <table>
                <thead>
                    <tr>
                        <th></th>
                        <th>Позиция</th>
                        <th colspan="2">Игрок</th>
                        <th>Стоимость</th>
                    </tr>
                </thead>
                <tbody>
                    @if (players != null)
                    {
                        foreach (var player in players.Skip(12*(pagination.Page-1)).Take(12))
                        {
                            bool isDisable = Squad.OneTeamPlayers[player.ClubId.GetValueOrDefault()] >= gameRules?.OneClubPlayersCount
                            || Squad.TeamPlayers.Where(tp => tp.PositionId == player.PositionId && tp.Id != 0).Count()
                            >= positionCountRules.FirstOrDefault(pcr => pcr.PositionId == player.PositionId).MaxCount || player.Price > gameRules.StartBalance - Squad.TeamCost;

                            bool isChoosen = Squad.TeamPlayers.FirstOrDefault(tp => tp.Id == player.PlayerId) != null;
                            <tr class="@(isChoosen ? "choosen" : isDisable ? "disable" : "")">
                                <td style="text-align:-webkit-center" width="10%"><div class="icon">i</div></td>
                                <td @onclick="() => HandlePlayerAction(player, isDisable, isChoosen)"
                                     style="text-align:center"> @player.Position.ShortName
                                </td>
                                <td @onclick="() => HandlePlayerAction(player, isDisable, isChoosen)"
                                    style="text-align:center">
                                    <img src="@player.Club?.Image.FilePath" alt="@player.Club?.Name[0]" />
                                </td>
                                <td @onclick="() => HandlePlayerAction(player, isDisable, isChoosen)">
                                    @player.Player.Name[0]. @player.Player.Surname
                                </td>
                                <td @onclick="() => HandlePlayerAction(player, isDisable, isChoosen)" style="text-align:center">
                                    @player.Price
                                </td>
                            </tr>
                        }
                    }
                    <tr>
                        <td colspan="5">
                            <div class="team-creating_select-players-menu_pagination">
                                <button @onclick="() => pagination.setPage(1)"> &lt;&lt; </button>
                                <button @onclick="pagination.Prev"> &lt; </button>
                                <div style="text-align:center">@pagination.Page/@pagination.TotalPages</div>
                                <button @onclick="pagination.Next"> &gt; </button>
                                <button @onclick="() => pagination.setPage(pagination.TotalPages)"> &gt;&gt; </button>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="team-creating_squad">
        @if (game?.Rules != null && Squad != null)
        {
                @if(Positions != null && Squad.TeamPlayers != null)
                {
                    foreach (var position in Positions)
                    {
                    <div class="team-creating_squad_line" style="grid-template-columns: repeat(@Squad.TeamPlayers.Where(p=>p.PositionId == position.Id).Count(), 7%);">
                        @foreach (var footballer in Squad.TeamPlayers.Where(f => f.PositionId == position.Id))
                        {
                            <div class="line_player">
                                @if (footballer.Id != 0)
                                {
                                    <div class="line_player_tools">
                                        <div class="icon" title="Информация о игроке" style="color:black; border-color:black;width:25%">i</div>
                                        <button @onclick="()=>RemovePlayer(footballer)" style="margin-left: auto;" class="btn-close" title="Убрать из состава"></button>
                                    </div>
                                }
                                else
                                {
                                    <div class="line_player_tools">
                                        <div><br /></div>
                                    </div>
                                }
                                <div @onclick="() => FilterByPosition(position.Id)" class="line_player_image-container"><img src="@footballer.ImagePath" /></div>
                                @if (footballer.Id == 0)
                                {

                                    <div>@position.ShortName</div>
                                    <div><br /></div>
                                }
                                else
                                {
                                    <div>@footballer.Surname</div>
                                    
                                }
                                <div>@footballer.Price</div>
                            </div>
                        }
                    </div>
                    }
                }
        }
    </div>
</div>

@* Модальное окно "Подробности" *@
<ModalWindow Title="" IsVisible="isModalVisible" OnClose="OnModalClose">
    <HeaderContent>
        <h1 @onclick="ShowMainInfo">Основная информация</h1>
        <h1 @onclick="ShowRules">Правила</h1>
        <h1 @onclick="ShowPoints">Начисление очков</h1>
    </HeaderContent>
    <ChildContent>
        @if (showMainInfo)
        {
            <table class="details_info">
                <tbody>
                    <tr>
                        <td width="40%">Название</td>
                        <td width="60%" style="text-align:start">@game?.name</td>
                    </tr>
                    <tr>
                        <td width="40%">Дата начала</td>
                        <td width="60%" style="text-align:start">@game?.start</td>
                    </tr>
                    <tr>
                        <td width="40%">Дата завершения</td>
                        <td width="60%" style="text-align:start">@game?.end</td>
                    </tr>
                </tbody>
            </table>
        }
        else if (showRules)
        {
            <table class="details_info">
                <tbody>
                    <tr>
                        <td width="40%">Количество человек в команде</td>
                        <td width="60%" style="text-align:start">@gameRules?.TeamCount</td>
                    </tr>
                    <tr>
                        <td width="40%">Максимальное количество игроков из одного клуба</td>
                        <td width="60%" style="text-align:start">@gameRules?.OneClubPlayersCount</td>
                    </tr>
                    <tr>
                        <td width="40%">Количество трансферов в каждом туре</td>
                        <td width="60%" style="text-align:start">@gameRules?.GwTransfers</td>
                    </tr>
                    <tr>
                        <td width="40%">Максимальное количество накопленных трансферов</td>
                        <td width="60%" style="text-align:start">@gameRules?.MaxTransfers</td>
                    </tr>
                    <tr>
                        <td width="40%">Количество игроков на скамейке запасных</td>
                        <td width="60%" style="text-align:start">@gameRules?.BenchCount</td>
                    </tr>
                    <tr>
                        <td width="40%">Стоимость трансфера</td>
                        <td width="60%" style="text-align:start">4 очка</td>
                    </tr>
                    <tr>
                        <td width="40%">Максимальное количество команд пользователя</td>
                        <td width="60%" style="text-align:start">@gameRules?.MaxUserTeams</td>
                    </tr>
                    <tr>
                        <td width="40%">Стартовый баланс</td>
                        <td width="60%" style="text-align:start">@gameRules?.StartBalance</td>
                    </tr>
                </tbody>
            </table>
        }
        else
        {
            <table class="details_point-info">
                <thead>
                    <tr>
                        <th>Действие</th>
                        <th>Вратарь</th>
                        <th>Защитник</th>
                        <th>Полузащитник</th>
                        <th>Нападающий</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var action in gameActions)
                    {
                        <tr>
                            <td>@Actions.First(i => i.Id == action).Name</td>
                            <td>@gamePoints.First(i => i.ActionnId == action && i.PositionId == 1).Point</td>
                            <td>@gamePoints.First(i => i.ActionnId == action && i.PositionId == 2).Point</td>
                            <td>@gamePoints.First(i => i.ActionnId == action && i.PositionId == 3).Point</td>
                            <td>@gamePoints.First(i => i.ActionnId == action && i.PositionId == 4).Point</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </ChildContent>
    <FooterContent>
        <button class="btn btn-primary" @onclick="CloseModal">Закрыть</button>
    </FooterContent>
</ModalWindow>

<ModalWindow Title="" Width="auto" IsVisible="isAcceptModalVisible" OnClose="OnAcceptModalClose">
    <ChildContent>
        <h2>Вы уверены, что хотите зарегистровать свою команду в турнире?</h2>
    </ChildContent>
    <FooterContent>
        <button class="team-creating_squad-info_bar" @onclick="CloseModal">Да</button>
        <button class="btn btn-primary" @onclick="CloseAcceptModal">НЕТ</button>
    </FooterContent>
</ModalWindow>
@code {
    [Parameter]
    public int GameId { get; set; }
    private Game game = new Game();
    private List<GameClubs> Clubs { get; set; } = null!;
    private Rules? gameRules = new Rules();
    private List<Actionn> Actions { get; set; } = null!;
    private List<Points> gamePoints { get; set; } = null!;
    private List<int> gameActions { get; set; } = null!;
    private bool showMainInfo = true;
    private bool showRules = false;
    private bool showPoints = false;
    private List<GameWeekPlayer> players { get; set; } = null!;
    private GameWeek gameWeek = new GameWeek();
    private double minPrice;
    private double maxPrice;
    private int SelectedClubId = 0;
    private int SelectedPositionId = 0;
    private double SelectedPrice = 15.0;
    private string SelectedName = null;
    private List<Position> Positions { get; set; } = null!;
    private int selectedButton = 0;
    private List<PositionCountRules> positionCountRules { get; set; } = null!;

    private Pagination pagination = new Pagination();

    protected override async Task OnInitializedAsync()

    {
        game = await context.games.Include(g=>g.Image).Include(g=>g.Rules).FirstOrDefaultAsync(g => g.id == GameId);
        if (game == null)
        {
            Console.WriteLine("Game not found.");
            return;
        }
        gameRules = context.rules.Find(GameId);
        gameWeek = await context.gameWeeks.FirstOrDefaultAsync(gw => gw.GameId == game.id && gw.Completed == null);
        players = await context.gameWeekPlayers.Where(p => p.GameWeekId == gameWeek.Id).Include(p=>p.Player).Include(p=>p.Position).Include(p=>p.Club).ThenInclude(c=>c.Image).OrderByDescending(p=>p.Price).AsNoTracking().ToListAsync();
        Actions = await context.actions.AsNoTracking().ToListAsync();
        positionCountRules = await context.positionCountRules.Where(pcr => pcr.GameId == game.id).AsNoTracking().ToListAsync();
        if (players != null)
        {
            minPrice = players.MinBy(p => p.Price).Price;
            minPrice -= minPrice % 1;
            maxPrice = players.MaxBy(p => p.Price).Price;
        }
        Clubs = await context.gameClubs.Where(x => x.GameId == game.id).Include(c => c.Club).AsNoTracking().ToListAsync();
        Positions = await context.positions.AsNoTracking().ToListAsync();
        showMainInfo = true;
        showRules = false;
        showPoints = false;

        foreach (var position in Positions)
        {
            if (positionCountRules.FirstOrDefault(pcr => pcr.PositionId == position.Id) != null)
            {
                for (int i = 0; i < positionCountRules.FirstOrDefault(pcr => pcr.PositionId == position.Id).MaxCount; i++)
                {
                    Squad.TeamPlayers.Add(new Footballer { Id = 0, PositionId = position.Id, ImagePath = "/Images/Icons/plus_Icon.png" });
                }
            }
        }
        foreach (var club in Clubs)
        {
            Squad.OneTeamPlayers.Add(club.ClubId, 0);
        }
        Squad.TeamCost = 0.0;
        if (players != null)
        {
            pagination.setTotalPages(players.Count(), 12);
            pagination.setPage(1);
        }
    }

    private void ShowMainInfo()
    {
        showMainInfo = true;
        showRules = false;
        showPoints = false;
        StateHasChanged();
    }
    private void ShowRules()
    {
        showMainInfo = false;
        showRules = true;
        showPoints = false;
        StateHasChanged();
    }
    private void ShowPoints()
    {
        showMainInfo = false;
        showRules = false;
        showPoints = true;
        StateHasChanged();
    }

    private bool isModalVisible = false;

    private void ShowModal()
    {
        isModalVisible = true;
        gameRules = context.rules.Find(game.id);
        gamePoints = context.points.Where(i => i.GameId == game.id).OrderBy(i => i.ActionnId).AsNoTracking().ToList();
        gameActions = gamePoints.Select(i => i.ActionnId).Distinct().ToList();
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    private void OnModalClose(bool visible)
    {
        isModalVisible = visible;
    }

    private bool isAcceptModalVisible = false;

    private void ShowAcceptModal()
    {
        isAcceptModalVisible = true;
    }

    private void CloseAcceptModal()
    {
        isAcceptModalVisible = false;
    }
    private void OnAcceptModalClose(bool visible)
    {
        isAcceptModalVisible = visible;
    }

    private async Task FilterByClub(ChangeEventArgs e)
    {
        SelectedClubId = int.Parse(e.Value.ToString());
        await ApplyFilters();
    }
    private async Task FilterByPosition(int position)
    {
        SelectedPositionId = position;
        selectedButton = position;
        await ApplyFilters();
    }
    private async Task FilterByPrice(ChangeEventArgs e)
    {
        SelectedPrice = double.Parse(e.Value.ToString());
        await ApplyFilters();
    }
    private async Task FilterByName(ChangeEventArgs e)
    {
        SelectedName = e.Value.ToString();
        await ApplyFilters();
    }
    private async Task CleanFilter()
    {
        SelectedPrice = 15;
        SelectedPositionId = 0;
        selectedButton = 0;
        SelectedClubId = 0;
        SelectedName = null;
        await ApplyFilters();
    }
    private async Task ApplyFilters()
    {
        var query = context.gameWeekPlayers
            .Where(p => p.GameWeekId == gameWeek.Id)
            .Include(p => p.Player)
            .Include(p => p.Position)
            .Include(p => p.Club)
            .ThenInclude(c => c.Image)
            .AsQueryable();

        if (SelectedClubId != 0)
        {
            query = query.Where(p => p.ClubId == SelectedClubId);
        }

        if (SelectedPositionId != 0)
        {
            query = query.Where(p => p.PositionId == SelectedPositionId);
        }
        if (SelectedName != null)
        {
            query = query.Where(p => p.Player.Surname.Contains(SelectedName));
        }

        players = await query.Where(p=>p.Price <= SelectedPrice).OrderByDescending(p => p.Price).AsNoTracking().ToListAsync();
        if (players != null)
        {
            pagination.setTotalPages(players.Count(), 12);
            pagination.setPage(1);
        }
        StateHasChanged();
    }
    //Логика работы составления состава
    private SquadForm Squad = new SquadForm();

    private void AddPlayer(GameWeekPlayer player)
    {
        var emptySpot = Squad.TeamPlayers.FirstOrDefault(p => p.Id == 0 && p.PositionId == player.PositionId);

        if (emptySpot != null)
        {
            emptySpot.Id = player.PlayerId;
            emptySpot.PositionId = player.PositionId;
            emptySpot.ImagePath = player.Club.Image.FilePath;
            emptySpot.Price = player.Price;
            emptySpot.Name = player.Player.Name;
            emptySpot.Surname = player.Player.Surname;
            emptySpot.PositionId = player.PositionId;
            emptySpot.ClubId = player.ClubId;
        }
        Squad.OneTeamPlayers[player.ClubId.GetValueOrDefault()] = Squad.TeamPlayers.Where(i => i.ClubId == player.ClubId).Count();
        Squad.TeamCost += player.Price;
        StateHasChanged();
    }

    private void RemovePlayer(Footballer player)
    {

        var playerToRemove = Squad.TeamPlayers.FirstOrDefault(p => p.Id == player.Id);

        if (playerToRemove != null)
        {
            Squad.OneTeamPlayers[player.ClubId.GetValueOrDefault()] -= 1;
            Squad.TeamCost -= player.Price.GetValueOrDefault();
            playerToRemove.Id = 0;
            playerToRemove.PositionId = player.PositionId;
            playerToRemove.ImagePath = "/Images/Icons/plus_Icon.png";
            playerToRemove.Price = null;
            playerToRemove.Name = null;
            playerToRemove.Surname = null;
            playerToRemove.ClubId = null;
        }
        StateHasChanged();
    }

    private void HandlePlayerAction(GameWeekPlayer player, bool isDisable, bool isChoosen)
    {
        if (!isDisable && !isChoosen)
        {
            AddPlayer(player);
        }
        else if (isChoosen)
        {
            var footballer = Squad.TeamPlayers.FirstOrDefault(tp => tp.Id == player.PlayerId);
            if (footballer != null)
            {
                RemovePlayer(footballer);
            }
        }
    }
    private void CleanSquad()
    {
        Squad.TeamCost = 0;
        foreach (var player in Squad.TeamPlayers.Where(tp => tp.Id != 0))
        {
            Squad.OneTeamPlayers[player.ClubId.GetValueOrDefault()] -= 1;
            player.Id = 0;
            player.PositionId = player.PositionId;
            player.ImagePath = "/Images/Icons/plus_Icon.png";
            player.Price = null;
            player.Name = null;
            player.Surname = null;
            player.ClubId = null;
        }
    }

    private void RegisterTeam()
    {
        
    }

}
